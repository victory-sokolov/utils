{"version":3,"file":"index.esm.js","sources":["../src/is.ts","../src/array.ts","../src/base.ts","../src/browser/browser.ts","../src/browser/video.ts","../src/browser/dom.ts","../src/browser/image.ts","../src/country.ts","../src/date.ts","../src/function.ts","../src/object.ts","../src/html.ts","../src/number.ts","../src/string.ts","../src/url.ts","../src/regex.ts","../src/node/cryptography.ts","../src/node/file.ts","../src/cache.ts"],"sourcesContent":["// Source: https://github.com/antfu/utils/blob/main/src/is.ts\nexport const toString = (v: any) => Object.prototype.toString.call(v);\n\nexport const isDef = <T = any>(val?: T): val is T => typeof val !== 'undefined';\nexport const isBoolean = (val: any): val is boolean => typeof val === 'boolean';\nexport const isFunction = <T extends Function>(val: any): val is T => typeof val === 'function';\nexport const isNumber = (val: any): val is number => typeof val === 'number';\nexport const isString = (val: unknown): val is string => typeof val === 'string';\nexport const isObject = (val: any): val is object => toString(val) === '[object Object]';\nexport const isUndefined = (val: any): val is undefined => toString(val) === '[object Undefined]';\nexport const isNull = (val: any): val is null => toString(val) === '[object Null]';\nexport const isRegExp = (val: any): val is RegExp => toString(val) === '[object RegExp]';\nexport const isDate = (val: any): val is Date => toString(val) === '[object Date]';\nexport const isJsObject = (val: any) => val !== null && (typeof val === 'function' || typeof val === 'object');\nexport const isHtmlElement = (element: Element): boolean => element instanceof Element;\nexport const hasProperty = (obj: any, key: string): boolean => {\n    if (!obj || !key) {\n        return false;\n    }\n    return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\n// @ts-ignore\nexport const isWindow = (val: any): boolean => typeof window !== 'undefined' && toString(val) === '[object Window]';\n// @ts-ignore\nexport const isBrowser = typeof window !== 'undefined';\n","import { hasProperty, isString } from './is';\nimport { Collection, IndexCallback, RecordObject } from './types';\n\n/**\n * Flatten nested array into 1 dimensional array\n * @param listOfArrays List of arrays to flatten\n * @returns flattened array\n */\nexport const flattenArray = <T>(listOfArrays: ReadonlyArray<T>): ReadonlyArray<T> => {\n    return listOfArrays.reduce((res, arr) => {\n        return [...res, ...(Array.isArray(arr) ? flattenArray(arr) : [arr])];\n    }, [] as T[]);\n};\n\n/**\n * Get unique values from array\n * @param array\n * @returns array of unique values\n */\nexport const unique = <T>(array: readonly T[]): Collection<T> => {\n    return Array.from(new Set(array));\n};\n\n/**\n * Remove item from array by value\n * @param array\n * @param value\n * @returns array with removed items\n */\nexport const removeItem = <T>(array: Collection<T>, values: T[]): Collection<T> => {\n    return array.filter((item) => !values.includes(item));\n};\n\n/**\n *\n * @param arr Array of date\n * @param count Amount of items to select from array\n * @returns Array with all randomly selected items\n */\nexport const randomItem = <T>(arr: T[], count: number): Array<T> => {\n    if (count === 0) return arr;\n    if (count > arr.length) return arr;\n\n    return Array.from({ length: count }, () => arr[Math.round(Math.random() * (arr.length - 1))]);\n};\n\n/**\n * Shuffle array values and returns a new array\n * @param arr Array to shuffle\n * @returns Shuffled array\n */\nexport const shuffleArray = <T>(arr: Collection<T>): Collection<T> => {\n    return arr\n        .map((value) => ({ value, sort: Math.random() }))\n        .sort((a, b) => a.sort - b.sort)\n        .map(({ value }) => value);\n};\n\n/**\n * Sort array of objects in Ascending order\n * @param array Array of objects to sort\n * @returns Sorted array of objects\n */\nexport const sortAsc = <T extends Record<string, T>>(array: ReadonlyArray<T>): ReadonlyArray<T> => {\n    return [...array].sort((a, b) => {\n        if (a.key < b.key) {\n            return -1;\n        } else if (a.key > b.key) {\n            return 1;\n        }\n        return 0;\n    });\n};\n\nconst fSort = (a, b) => {\n    return a > b ? 1 : a < b ? -1 : 0;\n};\n\n/**\n * Sort array by specific function\n * @param arr Array to sort\n * @param fSorting Function sorting algorithm\n * @returns\n */\nexport const sort = (arr: Array<Record<string, unknown>> = [], fSorting: any = null) => {\n    const copyArray = [...arr];\n    const fn = fSorting || fSort;\n    copyArray.sort(fn);\n    return copyArray;\n};\n\n/**\n *\n * @param arr Array to sort\n * @param order Order 1 - ascending -1 descending\n * @param key Key to sort by\n * @returns Sorted array of objects\n */\nexport const sortBy = (arr: Array<RecordObject> = [], order = 1, key = '') => {\n    if (!isString(key) || !hasProperty(arr[0], key)) {\n        return arr;\n    }\n    return sort(arr, (m, n) => {\n        return m[key] > n[key] ? order : m[key] < n[key] ? -1 * order : 0;\n    });\n};\n\n/**\n * Insert an item at a given index\n * @param index an index or a callback provided to findIndex\n * @param value the value of the item to insert\n * @param arr the array to insert into\n */\nexport const insertItemAtIndex = <T>(index: number | IndexCallback<T>, value: T, arr?: T[] | null) => {\n    if (!arr) {\n        return [];\n    }\n\n    const indexAt = typeof index === 'function' ? arr.findIndex(index) : index;\n    if (indexAt === -1) {\n        return arr;\n    }\n\n    return [...arr.slice(0, indexAt), value, ...arr.slice(indexAt)];\n};\n\n/**\n * Replace an item at a given index\n * @param index an index or a callback provided to findIndex\n * @param newValue the value of the item to be replaced\n * @param arr the array to replace at\n */\nexport const replaceItemAtIndex = <T>(index: number | IndexCallback<T>, newValue: T, arr?: T[] | null) => {\n    if (!arr) {\n        return [];\n    }\n\n    const indexAt = typeof index === 'function' ? arr.findIndex(index) : index;\n\n    if (indexAt === -1) {\n        return arr;\n    }\n\n    return [...arr.slice(0, indexAt), newValue, ...arr.slice(indexAt + 1)];\n};\n\n/**\n * Remove an item at an index\n * @param index an index or a callback provided to findIndex\n * @param arr the array to remove from\n */\nexport const removeItemAtIndex = <T>(index: number | IndexCallback<T>, arr?: T[] | null) => {\n    if (!arr) {\n        return [];\n    }\n\n    const indexAt = typeof index === 'function' ? arr.findIndex(index) : index;\n\n    if (indexAt === -1) {\n        return arr;\n    }\n\n    return [...arr.slice(0, indexAt), ...arr.slice(indexAt + 1)];\n};\n\n/**\n * Find median value of an array\n * @param arr Array to find median\n * @returns Median value\n */\nexport const median = (arr: number[]): number => {\n    const mid = Math.floor(arr.length / 2),\n        nums = [...arr].sort((a, b) => a - b);\n    return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\n\n/**\n * Intersect two arrays\n * intersection([1, 2, 3], [2, 3, 4]) // [2, 3]\n * @param arr1 First array\n * @param arr2 Second array\n * @returns Array of intersection\n */\nexport const intersection = <T>(arr1: T[], arr2: T[]): T[] => {\n    const set = new Set(arr1);\n    return arr2.filter((x) => set.has(x));\n};\n\n/**\n * Count the number of element occurs in the array\n * @param array Array of elements to\n * @returns Object where keys are array values and value is time el occurs in the array\n */\nexport const countBy = (array: Array<number | string>): Record<string, number> => {\n    return array.reduce((obj: { [key: string]: number }, item) => {\n        if (item in obj) {\n            // `item` is already a key so increment\n            obj[item] += 1;\n        } else {\n            // first time seeing `item` so initialize it\n            // with count of 1\n            obj[item] = 1;\n        }\n\n        return obj;\n    }, {});\n};\n\nexport const occurrenceCount = <T>(data: Array<T>) => {\n    const unique = Array.from(new Set(data));\n    return Object.fromEntries(\n        unique.map((char) => {\n            const occurrenceCount = data.filter((c) => c === char).length;\n            return [char, occurrenceCount];\n        })\n    );\n};\n","/**\n * Pause execution\n * @param ms Pause in milliseconds\n * @returns\n */\nexport const wait = (ms: number): Promise<void> => new Promise((resolve) => setTimeout(resolve, ms));\n","import { DeviceType } from '../types';\n\nconst devices = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\n\n/**\n * Data type to file\n * @param content ArrayBuffer\n * @param fileName Output file name\n * @param contentType Output file type\n */\nexport const dataToFile = (content: ArrayBuffer, fileName: string, contentType: string): void => {\n    const a = document.createElement('a');\n    const file = new Blob([content], { type: contentType });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n};\n\n/**\n * Detect device type: Mobile or Desktop\n * @returns Device type: Mobile or Desktop\n */\nexport const detectDeviceType = (): DeviceType => {\n    return devices.test(navigator.userAgent) ? 'Mobile' : 'Desktop';\n};\n\n/**\n * Check if user uses mobile device or desktop\n * @returns True if Mobile device is used\n */\nexport const isMobileDevice = (): boolean => {\n    if (devices.test(navigator.userAgent)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Get Operating System\n * @returns Operating System\n */\nexport const getOs = () => {\n    return navigator?.userAgentData?.platform || navigator?.platform || 'unknown';\n};\n\n/**\n * Save object to json file and download it\n * @param obj Object to export\n * @param fileName output file name\n */\nexport const downloadAsJson = (obj: Record<string, unknown>, fileName: string) => {\n    const dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(obj));\n    const downloadAnchorNode = document.createElement('a');\n    downloadAnchorNode.setAttribute('href', dataStr);\n    downloadAnchorNode.setAttribute('download', `${fileName}.json`);\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n};\n\n/**\n * Check if page is reloaded\n * @returns True if page reloaded\n */\nexport const isPageReloaded = () => {\n    return window.performance\n        .getEntriesByType('navigation')\n        .map((nav) => nav.entryType)\n        .includes('reload');\n};\n","import { CameraEnvironment } from '../types';\nimport { isMobileDevice } from './browser';\n\n/**\n * Detect which camera environment is used\n * @returns environment ur user camera\n */\nexport const cameraEnvironment = (): CameraEnvironment => (isMobileDevice() ? 'environment' : 'user');\n\n/**\n * Get current resolution depending on device\n * @returns Video resolution\n */\nexport const getVideoConstraint = () => {\n    const resolutions = {\n        qqvga: { width: { exact: 160 }, height: { exact: 120 } },\n        qvga: { width: { exact: 320 }, height: { exact: 240 } },\n        vga: { width: { exact: 640 }, height: { exact: 480 } },\n    } as const;\n    let videoConstraint;\n\n    if (isMobileDevice()) {\n        videoConstraint = {\n            width: { ideal: window.screen.height },\n            height: { ideal: window.screen.width },\n            facingMode: cameraEnvironment(),\n        } as const;\n    } else {\n        if (window.innerWidth < 960) {\n            videoConstraint = resolutions['qvga'];\n        } else {\n            videoConstraint = resolutions['vga'];\n        }\n    }\n    return videoConstraint;\n};\n\n/**\n * Start Video stream\n * @param isStreaming Is camera streaming\n * @param video HTMLVideoElement\n * @returns\n */\nexport const startCamera = async (isStreaming: boolean, video: HTMLVideoElement): Promise<void> => {\n    const constraint = getVideoConstraint();\n    if (isStreaming) return;\n\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                video: constraint,\n                audio: false,\n            });\n            video.srcObject = stream;\n            video.onloadedmetadata = () => {\n                video.play();\n            };\n        } catch (err) {\n            console.log(`An error occured! ${err}`);\n        }\n    } else {\n        console.error('getUserMedia not supported');\n    }\n};\n\n/**\n * Stop current video stream\n * @param stream Current video stream\n * @param isStreaming isStreaming\n * @returns\n */\nexport const stopCamera = (stream: MediaStream, isStreaming: boolean): void => {\n    if (!isStreaming) return;\n\n    stream.getTracks().forEach((track) => {\n        track.stop();\n    });\n};\n","/**\n * Wrapper for querySelector\n * @param selector HTML Selector as a string\n * @param context HTML element of document\n * @returns HTML Element\n */\nexport const $ = (selector: string, context: Document | HTMLElement = document): HTMLElement | null =>\n    context.querySelector(selector);\n\n/**\n * Wrapper querySelectorAll\n * @param selector HTML Selector as a string\n * @param context HTML element of document\n * @returns NodeList of HTMLElements\n */\nexport const $$ = (selector: string, context: Document | HTMLElement = document): NodeListOf<HTMLElement> =>\n    context.querySelectorAll(selector);\n\n// styles\nexport const style = (el: HTMLElement, styles: { [key: string]: string }) => {\n    Object.keys(styles).forEach((name: string) => (el.style[name] = styles[name]));\n};\n\n// class\nexport const addClass = (el: HTMLElement, ...classArgs: string[]) => el.classList.add(...classArgs);\nexport const removeClass = (el: HTMLElement, ...classArgs: string[]) => el.classList.remove(...classArgs);\n\n// dom operation\nexport const insertBefore = (node: HTMLElement, beforeNode: HTMLElement) =>\n    node.insertAdjacentElement('beforebegin', beforeNode);\nexport const insertAfter = (node: HTMLElement, afterNode: HTMLElement) =>\n    node.insertAdjacentElement('afterend', afterNode);\nexport const prepend = (node: HTMLElement, preNode: HTMLElement) => node.insertAdjacentElement('afterbegin', preNode);\n","import { ImageDimension } from '../types';\n\n/**\n * Get image dimension from dataUrl string\n * @param dataUrl Data url string\n * @returns image dimension (height, width)\n */\nexport const getImageDimensions = async (dataUrl: string): Promise<ImageDimension> => {\n    const img = new Image();\n    img.src = dataUrl;\n    await img.decode();\n    return { width: img.height, height: img.width };\n};\n\n/**\n * Create base64 data image to be used for img source\n * @param imageData Imagedata as a string\n * @returns encoded image data for image tag\n */\nexport const setBase64Img = (imageData: string): string => {\n    return `data:image/png;base64,${imageData}`;\n};\n\n/**\n * Convert file to base64 encoded format\n * @param file File blob\n */\nexport const fileToBase64 = (file: Blob) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (e: Event) => {\n        return (e.target as FileReader).result;\n    };\n};\n","/**\n * Get country name from ISO code\n * @param iso ISO code\n * @returns Country name from ISO code\n */\nexport const getCountryFromISO = (iso: string): string | undefined => {\n    const languageNames = new Intl.DisplayNames(['en'], { type: 'region' });\n    return languageNames.of(iso.toUpperCase());\n};\n\n/**\n * Get flag emoji from country code\n * @param countryCode\n * @returns Flag emoji string\n */\nexport const getFlagEmoji = (countryCode: string): string => {\n    const codePoints = countryCode\n        .toUpperCase()\n        .split('')\n        .map((char) => 127397 + char.charCodeAt(0));\n    return String.fromCodePoint(...codePoints);\n};\n","import { MonthName } from './types/';\n\n/**\n * Get month names as a list of strings\n * @returns Month array\n */\nexport const getMonthList = () => {\n    return Array.from({ length: 12 }, (_, i): MonthName => {\n        return new Date(0, i).toLocaleString('en-US', {\n            month: 'long',\n        }) as MonthName;\n    });\n};\n\n/**\n * Convert Date to date with timestamp separated with dashes\n * @param date Date to convert\n * @returns Date with timestamp\n */\nexport const dateWithTimeStamp = (date: Date): string => {\n    return date.toJSON().slice(0, 19).replace('T', '-').replaceAll(':', '-');\n};\n\n/**\n * Get last day of the week\n * @param date Date to get the last day of the week from\n * @returns Last day of the week\n */\nexport const getWeekLastDay = (date: Date): Date => {\n    const weekLastDayInMilliseconds = date.getTime() + (6 - date.getDay()) * 86400000;\n    const weekLastDay = new Date(weekLastDayInMilliseconds);\n    return weekLastDay;\n};\n\n/**\n * Get first day of the week\n * @param date Date to get first day of the week from\n * @returns First day of the week\n */\nexport const getWeekFirstDay = (date: Date): Date => {\n    const weekFirstDayInMilliseconds = date.getTime() - (date.getDay() - 1) * 86400000;\n    const weekFirstDay = new Date(weekFirstDayInMilliseconds);\n    return weekFirstDay;\n};\n\n/**\n * Get last day of the month\n * @param date Date to get the last day of the month\n * @returns Last day of the month\n */\nexport const getMonthLastDay = (date: Date): Date => {\n    const monthNextFirstDay = new Date(date.getFullYear(), date.getMonth() + 1);\n    const monthLastDayInMilliseconds = monthNextFirstDay.getTime() - 86400000;\n    const monthLastDay = new Date(monthLastDayInMilliseconds);\n    return monthLastDay;\n};\n\n/**\n * Get first day of the month\n * @param date Date to get first day of the month\n * @returns First day of the month\n */\nexport const getMonthFirstDay = (date: Date) => {\n    const monthFirstDay = new Date(date.getFullYear(), date.getMonth());\n    return monthFirstDay;\n};\n\n/**\n * Check if date is weekday\n * @param date Date to check\n * @returns true if date is weekday\n */\nexport const isWeekday = (date: Date): boolean => date.getDay() % 6 !== 0;\n\n/**\n * Convert date to long date format\n * @param date Date to long date format\n * @returns Long date format\n */\nexport const toLongDate = (date: string): string => {\n    if (!Date.parse(date)) {\n        throw new Error(`Invalid date provided`);\n    }\n    return new Date(date).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    });\n};\n","type AnyFunc = (...arg: any) => any;\n\ntype PipeArgs<F extends AnyFunc[], Acc extends AnyFunc[] = []> = F extends [(...args: infer A) => infer B]\n    ? [...Acc, (...args: A) => B]\n    : F extends [(...args: infer A) => any, ...infer Tail]\n    ? Tail extends [(arg: infer B) => any, ...any[]]\n        ? PipeArgs<Tail, [...Acc, (...args: A) => B]>\n        : Acc\n    : Acc;\n\ntype LastFnReturnType<F extends Array<AnyFunc>, Else = never> = F extends [...any[], (...arg: any) => infer R]\n    ? R\n    : Else;\n\n/**\n * Call every function in an array\n * @param functions List of functions to call\n */\nexport const batchInvoke = (functions: Array<() => void>): void => {\n    functions.forEach((fn) => fn && fn());\n};\n\n/**\n * Passing result from one function to another\n * @param fns Array of functions\n * @returns result of last invoked function\n */\nexport const pipe = (...fns: Array<Function>) => fns.reduce((prevFunc: unknown, func) => func(prevFunc), fns[0]);\n\n/**\n * Passing result of one function to another with arguments\n * @param arg Argument for the first functiion\n * @param firstFn First function to execute\n * @param fns Array of functions\n * @returns Result of last invoked function\n */\nexport const applyPipe = <FirstFn extends AnyFunc, F extends AnyFunc[]>(\n    arg: Parameters<FirstFn>[0],\n    firstFn: FirstFn,\n    ...fns: PipeArgs<F> extends F ? F : PipeArgs<F>\n): LastFnReturnType<F, ReturnType<FirstFn>> => {\n    return (fns as AnyFunc[]).reduce((acc, fn) => fn(acc), firstFn(arg));\n};\n\n/**\n * Check if function is asynchronous\n * @param fn: Function to check\n * @returns True if function is asynchronous\n */\nexport const isAsync = (fn: Function) => fn.constructor.name === 'AsyncFunction';\n","import { RecordObject } from './types';\n\n/**\n * Remove specific keys from object\n * @param obj Object from which to remove keys\n * @param props Keys to remove from object\n * @returns Object with keys removed\n */\nexport const omit = <T extends RecordObject, K extends keyof T>(obj: T, ...props: K[]): Omit<T, K> => {\n    const filteredArray = Object.entries(obj).filter(([key]) => !props.includes(key as K));\n    return Object.fromEntries(filteredArray) as Omit<T, K>;\n};\n\n/**\n * Pick specific keys from object\n * @param obj Object from which to pick keys\n * @param props Keys to select from object\n * @returns Object with selected keys\n */\nexport const pick = <T extends RecordObject, K extends keyof T>(obj: T, ...props: K[]): Pick<T, K> => {\n    const filteredArray = Object.entries(obj).filter(([key]) => props.includes(key as K));\n    return Object.fromEntries(filteredArray) as Pick<T, K>;\n};\n\n/**\n * Flatten nested objects into a single object\n * @param obj Object to flatten\n * @returns Flatten object\n */\nexport const flattenObject = (obj: RecordObject): RecordObject => {\n    const flattened: { [k: string]: unknown } = {};\n\n    Object.keys(obj).forEach((key) => {\n        const value = obj[key];\n\n        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n            Object.assign(flattened, flattenObject(value as RecordObject));\n        } else {\n            flattened[key] = value;\n        }\n    });\n\n    return flattened;\n};\n\n/**\n * Filter falsy values from object\n * @param obj Object to filter\n * @returns Filtered object\n */\nexport const filterFalsyFromObject = <T extends RecordObject>(obj: T): RecordObject => {\n    return Object.keys(obj).reduce((acc: RecordObject, key) => {\n        if (obj[key]) {\n            acc[key] = obj[key];\n        }\n        return acc;\n    }, {} as T);\n};\n\n/**\n * Union two objects and exclude false values when merging same keys\n * @param left\n * @param right\n * @returns New combined object\n */\nexport const unionWithExclusion = (left: RecordObject, right: RecordObject): RecordObject => {\n    return [left, right].reduce((prev, current) => {\n        if (current) {\n            Object.entries(current).map(([key, value]) => {\n                if (!value) return;\n                // @ts-ignore\n                prev[key] =\n                    typeof value === 'object'\n                        ? // @ts-ignore\n                          unionWithExclusion(prev[key], value)\n                        : value;\n            });\n        }\n        return prev;\n    }, {});\n};\n\n/**\n * Flip objects keys with objects values\n * @param data Input object data\n * @returns Inverted object\n */\nexport const flip = (data: RecordObject): RecordObject =>\n    Object.fromEntries(Object.entries(data).map(([key, value]) => [value, key]));\n","import { flip } from './object';\n\nconst htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst htmlUnescapes = flip(htmlEscapes) as Record<string, string>;\n\n/** Used to match HTML entities and HTML characters. */\nconst reUnescapedHtml = /[&<>\"']/g;\nconst reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\nconst reEscapedHtml = /&(?:amp|lt|gt|quot|#(0+)?39);/g;\nconst reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\n/**\n * Remove HTML tags from the text\n * @param text Text with HTML tags\n * @returns Text with HTML tags removed\n */\nexport const removeHtmlTags = (text: string): string => text.replace(/<(?:.|\\\\n)*?>/gm, '');\n\n/**\n * Escape HTML tags to entities\n * @param str HTML string\n * @returns Escaped HTML tags\n */\nexport const escape = (str: string) => {\n    return str && reHasUnescapedHtml.test(str) ? str.replace(reUnescapedHtml, (chr) => htmlEscapes[chr]) : str || '';\n};\n\n/**\n * Unescape HTML entities\n * @param str HTML string\n * @returns Unescaped HTML entity\n */\nexport const unescape = (str: string) => {\n    return str && reHasEscapedHtml.test(str)\n        ? str.replace(reEscapedHtml, (entity) => htmlUnescapes[entity] || \"'\")\n        : str || '';\n};\n","/**\n * Converts range of numbers in string format to array of number seequence\n * Format: 1,6 or 1-6 or 6\n * @param range range of numbers\n * @returns array of number seequence\n */\nexport const rangeParser = (range: string): number[] => {\n    let [start, end] = range.split(/[,-]/).map(Number);\n    if (!end) {\n        end = start;\n        start = 1;\n    }\n    return Array.from({ length: end - start + 1 }, (_, i) => i + start);\n};\n\n/**\n * Prepend leading zero to number\n * @param num Number to prepend leading zero\n * @returns String with leading zero\n */\nexport const addZero = (num: number) => {\n    return num > 9 ? num.toString() : `0${num}`;\n};\n\n/**\n * Get random number between two numbers\n * @param min Min number\n * @param max Max number\n * @returns Number between min and max number\n */\nexport const getRandomNumber = (min: number, max: number) => {\n    return Math.random() * (max - min) + min;\n};\n","/**\n * String to camelCase\n * @param str string to camelCase\n * @returns Camelcased string\n */\nexport const camelCase = (str: string): string => {\n    return (\n        str\n            .toLocaleLowerCase()\n            // remove any non alpha-numeric chars (but leave spaces)\n            .replace(/[^a-zA-Z0-9 ]/g, ' ')\n            // capitalize any words with a leading space (and remove the space)\n            .replace(/\\s+(\\w)?/gi, (m, l) => l.toUpperCase())\n    );\n};\n\n/**\n * String to pascalcase\n * @param str string to pascalcase\n * @returns Pascal case string\n */\nexport const pascalCase = (str: string, separator = ' '): string => {\n    return str\n        .split(separator)\n        .map((word) => word.replace(/^\\w/, (c) => c.toUpperCase()))\n        .join('');\n};\n\n/**\n * String to kebabcase\n * @param str string to kebabcase\n * @returns KebabCase string\n */\nexport const kebabCase = (str: string): string => {\n    return str\n        .replace(/([a-z])([A-Z])/g, '$1-$2')\n        .replace(/[\\s_]/g, '-')\n        .toLowerCase();\n};\n\n/**\n * Escape HTML string\n * @param unsafe Unsafe string to escape\n * @returns escaped HTML string\n */\nexport const escapeHtml = (unsafe: string): string => {\n    return unsafe\n        .replaceAll('&', '&amp;')\n        .replaceAll('<', '&lt;')\n        .replaceAll('>', '&gt;')\n        .replaceAll('\"', '&quot;')\n        .replaceAll(\"'\", '&#039;');\n};\n\n/**\n * Remove Zerowidth characters from string\n * @param str string to clean up\n * @returns string with zerowidth characters removed\n */\nexport const removeZeroWidthSpace = (str: string): string => str.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n\n/**\n * Check whether string ends with any item in the array\n * @param data The string to check if it ends with\n * @param items String array of items to check agains the data string\n * @returns boolean\n */\nexport const endsWithAny = (data: string, items: string[]): boolean => {\n    return items.some((element) => data.endsWith(element));\n};\n\n/**\n * Check whether string starts with any item in the array\n * @param data The string to check if it starts with\n * @param items String array of items to check agains the data string\n * @returns boolean\n */\nexport const startsWithAny = (data: string, items: string[]): boolean => {\n    return items.some((element) => data.startsWith(element));\n};\n\n/**\n * Validate if string is a valid UUID\n * @param id UUID to validate\n * @returns True if UUID is valid\n */\nexport const isValidUUID = (id: string): boolean => {\n    // Regular expression to check if string is a valid UUID\n    const regexExp = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/gi;\n    return regexExp.test(id);\n};\n\n/**\n * Generate random HEX color\n * @returns HEX code\n */\nexport const randomHexColorCode = (): string => {\n    const n = (Math.random() * 0xfffff * 1000000).toString(16);\n    return '#' + n.slice(0, 6);\n};\n\n/**\n * Generate random string\n * @param len\n * @param prefix\n * @returns Random string\n */\nexport const randomStr = (len = 32, prefix = '') => {\n    let s = prefix;\n    for (let i = 0; i < len; i++) {\n        const rand = Math.random();\n        const floor = Math.floor(rand * 36);\n        const c = floor.toString(36);\n        s += floor > 9 && rand > 0.3 && rand < 0.7 ? c.toUpperCase() : c;\n    }\n    return s.substring(0, len);\n};\n\n/**\n * Slugify text\n * @param text text to be slugified\n * @returns slugified text\n */\nexport const slugify = (text: string) => {\n    return text\n        .toString()\n        .toLowerCase()\n        .replace(/\\s+/g, '-') // Replace spaces with -\n        .replace(/[^\\w-]+/g, '') // Remove all non-word chars\n        .replace(/--+/g, '-') // Replace multiple - with single -\n        .replace(/^-+/, '') // Trim - from start of text\n        .replace(/-+$/, ''); // Trim - from end of text\n};\n\n/**\n * Capitalize first letter\n * @param str Stirng to capitalize\n * @returns Capitalized string\n */\nexport const capitalize = (str: string): string => {\n    if (!str || typeof str !== 'string') return str;\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/**\n * Truncate string to n characters\n * @param str Stirng to truncate\n * @param length Length of string to truncate\n * @returns Truncated string\n */\nexport const truncate = (str: string, length: number) => {\n    if (!str || str.length <= length) return str;\n    return `${str.slice(0, length)}...`;\n};\n","/**\n * Add trailing slash to url\n * @param url URL to add trailing slash\n * @returns URL with trailing slash added\n */\nexport const addTrailingSlash = (url: string) => {\n    return url.replace(/\\/?$/, '/');\n};\n","/**\n * Validate email address\n * @param email Email address to validate\n * @returns True if email address is valid\n */\nexport const isValidEmail = (email: string) => {\n    const re =\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n};\n\n/**\n * Validate if IP is valid IPV4\n * @param ip IP address\n * @returns True if IPV4 is valid\n */\nexport const isValidIPV4 = (ip: string) => {\n    const regex = /^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$/gm;\n    return regex.test(ip);\n};\n\n/**\n * Validate if IP is valid IPV6\n * @param ip IP address\n * @returns True if IPV6 is valid\n */\nexport const isValidIPV6 = (ip: string) => {\n    const regex =\n        /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/gi;\n    return regex.test(ip);\n};\n\n/**\n * Validate url\n * @param url URL to validate\n * @returns True if valid url\n */\nexport const isValidUrl = (url: string) => {\n    const urlPattern = new RegExp(\n        '^(https?:\\\\/\\\\/)?' + // validate protocol\n            '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // validate domain name\n            '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // validate OR ip (v4) address\n            '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // validate port and path\n            '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // validate query string\n            '(\\\\#[-a-z\\\\d_]*)?$',\n        'i'\n    );\n\n    return urlPattern.test(url);\n};\n","import { randomBytes, pbkdf2Sync } from 'node:crypto';\n\n/**\n * Hash string\n * @param str Plain text\n * @param iterations Amount of iterations. Default to 10000\n * @param keyLen Key length. Default to 64\n * @returns Hashed object with meta information\n */\nexport const hashString = (str: string, iterations = 10000, keyLen = 64, digest = 'sha512') => {\n    const salt = randomBytes(128).toString('base64');\n    const hash = pbkdf2Sync(str, salt, iterations, keyLen, digest).toString('hex');\n    return {\n        salt: salt,\n        hash: hash,\n        iterations: iterations,\n        keyLen: keyLen,\n    };\n};\n\n/**\n * Validated Hash string\n * @param Text to validate\n * @param savedHash Generated hash\n * @param savedSalt Generated salt\n * @param iterations Amount of iterations. Default to 10000\n * @param keyLen  Key length. Default to 64\n * @param digest Hash algorithm, Default to sha512\n * @returns\n */\nexport const validateHash = (\n    password: string,\n    savedHash: string,\n    savedSalt: string,\n    iterations: number,\n    keyLen: number,\n    digest: string\n) => {\n    return savedHash == pbkdf2Sync(password, savedSalt, iterations, keyLen, digest).toString('hex');\n};\n","import path from 'path';\nimport { stat, readdir } from 'node:fs/promises';\n\nexport const readdirRecursive = async (dir, fileList: string[] = []) => {\n    const exclude = ['node_modules', '.venv', '.env'];\n    const files = await readdir(dir);\n    for (const file of files) {\n        const filePath = path.join(dir, file);\n        const fileStat = await stat(filePath);\n        if (fileStat.isDirectory() && !exclude.includes(file)) {\n            fileList = await readdirRecursive(filePath, fileList);\n        } else {\n            fileList.push(filePath);\n        }\n    }\n    return fileList;\n};\n","export const cache = (() => {\n    const store = {};\n\n    return {\n        set(key, value) {\n            store[key] = value;\n        },\n\n        has(key) {\n            return !!this.get(key);\n        },\n\n        get(key) {\n            return store[key];\n        },\n\n        remove(key) {\n            if (this.has(key)) {\n                store[key] = null;\n                delete store[key];\n            }\n        },\n    };\n})();\n"],"names":["toString","v","isDef","val","isBoolean","isFunction","isNumber","isString","isObject","isUndefined","isNull","isRegExp","isDate","isJsObject","isHtmlElement","element","hasProperty","obj","key","isWindow","isBrowser","flattenArray","listOfArrays","res","arr","unique","array","removeItem","values","item","randomItem","count","shuffleArray","value","a","b","sortAsc","fSort","sort","fSorting","copyArray","fn","sortBy","order","m","n","insertItemAtIndex","index","indexAt","replaceItemAtIndex","newValue","removeItemAtIndex","median","mid","nums","intersection","arr1","arr2","set","x","countBy","occurrenceCount","data","char","c","wait","ms","resolve","devices","dataToFile","content","fileName","contentType","file","detectDeviceType","isMobileDevice","getOs","_a","downloadAsJson","dataStr","downloadAnchorNode","isPageReloaded","nav","cameraEnvironment","getVideoConstraint","resolutions","videoConstraint","startCamera","isStreaming","video","constraint","stream","err","stopCamera","track","$","selector","context","$$","style","el","styles","name","addClass","classArgs","removeClass","insertBefore","node","beforeNode","insertAfter","afterNode","prepend","preNode","getImageDimensions","dataUrl","img","setBase64Img","imageData","fileToBase64","reader","e","getCountryFromISO","iso","getFlagEmoji","countryCode","codePoints","getMonthList","_","i","dateWithTimeStamp","date","getWeekLastDay","weekLastDayInMilliseconds","getWeekFirstDay","weekFirstDayInMilliseconds","getMonthLastDay","monthLastDayInMilliseconds","getMonthFirstDay","isWeekday","toLongDate","batchInvoke","functions","pipe","fns","prevFunc","func","applyPipe","arg","firstFn","acc","isAsync","omit","props","filteredArray","pick","flattenObject","flattened","filterFalsyFromObject","unionWithExclusion","left","right","prev","current","flip","htmlEscapes","htmlUnescapes","reUnescapedHtml","reHasUnescapedHtml","reEscapedHtml","reHasEscapedHtml","removeHtmlTags","text","escape","str","chr","unescape","entity","rangeParser","range","start","end","addZero","num","getRandomNumber","min","max","camelCase","l","pascalCase","separator","word","kebabCase","escapeHtml","unsafe","removeZeroWidthSpace","endsWithAny","items","startsWithAny","isValidUUID","id","randomHexColorCode","randomStr","len","prefix","s","rand","floor","slugify","capitalize","truncate","length","addTrailingSlash","url","isValidEmail","email","isValidIPV4","ip","isValidIPV6","isValidUrl","hashString","iterations","keyLen","digest","salt","randomBytes","hash","pbkdf2Sync","validateHash","password","savedHash","savedSalt","readdirRecursive","dir","fileList","exclude","files","readdir","filePath","path","stat","cache","store"],"mappings":"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"}